--- Makefile.orig	2011-12-07 22:02:02 UTC
+++ Makefile
@@ -32,7 +32,6 @@ SOURCES = src/base64.c \
 		  src/crypt.c \
 		  src/date.c \
 		  src/dbd.c \
-		  src/dbm.c \
 		  src/env.c \
 		  src/errno.c \
 		  src/filepath.c \
@@ -67,8 +66,8 @@ SOURCES = src/base64.c \
 
 # Determine compiler flags and linker flags for external dependencies using a
 # combination of pkg-config, apr-1-config, apu-1-config and apreq2-config.
-override CFLAGS += $(shell lua etc/make.lua --cflags)
-override LFLAGS += $(shell lua etc/make.lua --lflags)
+override CFLAGS += $(shell lua51 etc/make.lua --cflags)
+override LFLAGS += $(shell lua51 etc/make.lua --lflags)
 
 # Create debug builds by default but enable release
 # builds using the command line "make DO_RELEASE=1".
@@ -99,48 +98,48 @@ default: $(BINARY_MODULE)
 
 # Build the binary module.
 $(BINARY_MODULE): $(OBJECTS) Makefile
-	$(CC) $(LINK_TYPE) -o $@ $(OBJECTS) $(LFLAGS) || lua etc/make.lua --check
+	$(CC) $(LINK_TYPE) -o $@ $(OBJECTS) $(LFLAGS) || lua51 etc/make.lua --check
 
 # Build the standalone libapreq2 binding (not sure if anyone out there is
 # actually using this, if you are please speak up or I may remove this :-)
 $(APREQ_BINARY): etc/apreq_standalone.c Makefile
-	$(CC) -Wall $(LINK_TYPE) -o $@ $(CFLAGS) -fPIC etc/apreq_standalone.c $(LFLAGS) || lua etc/make.lua --check
+	$(CC) -Wall $(LINK_TYPE) -o $@ $(CFLAGS) -fPIC etc/apreq_standalone.c $(LFLAGS) || lua51 etc/make.lua --check
 
 # Compile individual source code files to object files.
 $(OBJECTS): %.o: %.c src/lua_apr.h Makefile
-	$(CC) -Wall -c $(CFLAGS) -fPIC $< -o $@ || lua etc/make.lua --check
+	$(CC) -Wall -c $(CFLAGS) -fPIC $< -o $@ || lua51 etc/make.lua --check
 
 # Always try to regenerate the error handling module.
 src/errno.c: etc/errors.lua Makefile
-	@lua etc/errors.lua
+	@lua51 etc/errors.lua
 
 # Install the Lua/APR binding under $LUA_DIR.
 install: $(BINARY_MODULE) docs
-	mkdir -p $(LUA_SHAREDIR)/apr/test
-	cp $(SOURCE_MODULE) $(LUA_SHAREDIR)/apr.lua
-	cp $(SERIALIZATION_MODULE) $(LUA_SHAREDIR)/apr/serialize.lua
-	cp test/*.lua $(LUA_SHAREDIR)/apr/test
-	mkdir -p $(LUA_LIBDIR)/apr
-	cp $(BINARY_MODULE) $(LUA_LIBDIR)/apr/$(BINARY_MODULE)
-	[ ! -f $(APREQ_BINARY) ] || cp $(APREQ_BINARY) $(LUA_LIBDIR)/$(APREQ_BINARY)
-	[ -d $(LUA_APR_DOCS) ] || mkdir -p $(LUA_APR_DOCS)
-	cp doc/docs.html doc/notes.html doc/readme.html doc/todo.html $(LUA_APR_DOCS) 2>/dev/null || true
+	mkdir -p $(DESTDIR)$(LUA_SHAREDIR)/apr/test
+	cp $(SOURCE_MODULE) $(DESTDIR)$(LUA_SHAREDIR)/apr.lua
+	cp $(SERIALIZATION_MODULE) $(DESTDIR)$(LUA_SHAREDIR)/apr/serialize.lua
+	cp test/*.lua $(DESTDIR)$(LUA_SHAREDIR)/apr/test
+	mkdir -p $(DESTDIR)$(LUA_LIBDIR)/apr
+	cp $(BINARY_MODULE) $(DESTDIR)$(LUA_LIBDIR)/apr/$(BINARY_MODULE)
+	[ ! -f $(APREQ_BINARY) ] || cp $(APREQ_BINARY) $(DESTDIR)$(LUA_LIBDIR)/$(APREQ_BINARY)
+	[ -d $(LUA_APR_DOCS) ] || mkdir -p $(DESTDIR)$(LUA_APR_DOCS)
+	cp doc/docs.html doc/notes.html doc/readme.html doc/todo.html $(DESTDIR)$(LUA_APR_DOCS) 2>/dev/null || true
 
 # Remove previously installed files.
 uninstall:
-	rm -f $(LUA_SHAREDIR)/apr.lua
-	rm -fR $(LUA_SHAREDIR)/apr/test
-	rm -fR $(LUA_LIBDIR)/apr
-	cd $(LUA_APR_DOCS) && rm -r docs.html notes.html readme.html todo.html
-	rmdir $(LUA_APR_DOCS) 2>/dev/null || true
+	rm -f $(DESTDIR)$(LUA_SHAREDIR)/apr.lua
+	rm -fR $(DESTDIR)$(LUA_SHAREDIR)/apr/test
+	rm -fR $(DESTDIR)$(LUA_LIBDIR)/apr
+	cd $(DESTDIR)$(LUA_APR_DOCS) && rm -r docs.html notes.html readme.html todo.html
+	rmdir $(DESTDIR)$(LUA_APR_DOCS) 2>/dev/null || true
 
 # Run the test suite.
 test: install
-	export LD_PRELOAD=/lib/libSegFault.so; lua -e "require 'apr.test' ()"
+	lua51 -e "require 'apr.test' ()"
 
 # Run the test suite under Valgrind to detect and analyze errors.
 valgrind:
-	valgrind -q --track-origins=yes --leak-check=full lua -e "require 'apr.test' ()"
+	valgrind -q --track-origins=yes --leak-check=full lua51 -e "require 'apr.test' ()"
 
 # Create or update test coverage report using "lcov".
 coverage:
@@ -151,10 +150,10 @@ coverage:
 
 # Convert the Markdown documents to HTML.
 docs: doc/docs.md $(SOURCE_MODULE) $(SOURCES)
-	@lua etc/wrap.lua doc/docs.md doc/docs.html
-	@lua etc/wrap.lua README.md doc/readme.html
-	@lua etc/wrap.lua NOTES.md doc/notes.html
-	@lua etc/wrap.lua TODO.md doc/todo.html
+	@lua51 etc/wrap.lua doc/docs.md doc/docs.html
+	@lua51 etc/wrap.lua README.md doc/readme.html
+	@lua51 etc/wrap.lua NOTES.md doc/notes.html
+	@lua51 etc/wrap.lua TODO.md doc/todo.html
 
 # Extract the documentation from the source code and generate a Markdown file
 # containing all documentation including coverage statistics (if available).
@@ -166,7 +165,7 @@ docs: doc/docs.md $(SOURCE_MODULE) $(SOU
 # documentation and lose the coverage statistics...
 doc/docs.md: etc/docs.lua
 	@[ -d doc ] || mkdir doc
-	@lua etc/docs.lua > doc/docs.md
+	@lua51 etc/docs.lua > doc/docs.md
 
 # Create a profiling build, run the test suite, generate documentation
 # including test coverage, then clean the intermediate files.
